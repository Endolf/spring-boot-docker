apiVersion: v1
kind: Service
metadata:
  name: cassandra
  labels:
    app: cassandra
    tier: database
spec:
  ports:
    - port: 9042
      name: cql
  selector:
    app: cassandra
  clusterIP: None
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: cassandra
spec:
  serviceName: cassandra
  replicas: 1
  template:
    metadata:
      labels:
        app: cassandra
        tier: database
    spec:
      containers:
        - image: cassandra:3.10
          name: cassandra
          ports:
            - containerPort: 7000
              name: intra-node
            - containerPort: 7001
              name: tls-intra-node
            - containerPort: 7199
              name: jmx
            - containerPort: 9042
              name: cql
            - containerPort: 9160
              name: thrift
          env:
            - name: CASSANDRA_CLUSTER_NAME
              value: "Cassandra Cluster"
            - name: MAX_HEAP_SIZE
              value: 256M
            - name: HEAP_NEWSIZE
              value: 64M
            - name: CASSANDRA_SEEDS
              value: "cassandra.default.svc.cluster.local"
          volumeMounts:
            - name: data-storage
              mountPath: /var/lib/cassandra
          readinessProbe:
            exec:
              command: ["/bin/bash", "-c", "nodetool status | grep -e 'U.*'`hostname -i`"]
            initialDelaySeconds: 30
            timeoutSeconds: 5
          command: ["/bin/bash", "-c", "
              set -ex;
              export CASSANDRA_SEEDS=`getent hosts \\`hostname -d\\` | cut -d ' ' -f1 | head -3 | paste -sd ',' -`;
              /docker-entrypoint.sh ${@}
            "]
          args: ["cassandra", "-f"]
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "
                  set -x\n
                  while true;\n
                  do\n
                      timeout 1 bash -c 'cat < /dev/null > /dev/tcp/localhost/9042'\n
                      exitCode=$?\n

                      if [ $exitCode = 0 ]; then\n
                        cqlsh -e \"CREATE KEYSPACE IF NOT EXISTS test WITH durable_writes = true AND replication = { 'replication_factor' : 1, 'class' : 'SimpleStrategy' };\"\n
                        break;\n
                      fi\n
                      sleep 1s\n
                  done\n
                "]
  volumeClaimTemplates:
    - metadata:
        name: data-storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
